@model List<ClearCare.Models.Entities.NurseAvailability>

@{
    ViewData["Title"] = "My Calendar";
}

<!DOCTYPE html>
<html>

<head>
    <title>My Calendar</title>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar/index.global.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        #calendar {
            max-width: 900px;
            margin: 40px auto;
        }
    </style>
    <script>
        var calendar;
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                selectable: true, // Allows clicking empty dates
                events: function (fetchInfo, successCallback, failureCallback) {
                    $.getJSON('/NurseAvailability/getAvailabilityByNurseIdForCalendar', function (data) {
                        var events = data.map(function (availability) {
                            return {
                                id: availability.id,
                                title: "Unavailable: " + availability.extendedProps.nurseId,
                                start: availability.start,
                                extendedProps: {
                                    nurseId: availability.extendedProps.nurseId,
                                    startTime: availability.extendedProps.startTime,
                                    endTime: availability.extendedProps.endTime
                                }
                            };
                        });
                        successCallback(events);
                    }).fail(function () {
                        failureCallback();
                    });
                },

                eventClick: function (info) {
                    const clickedDate = new Date(info.event.startStr);
                    const today = new Date();

                    // Reset time part of 'today' so we only compare dates
                    today.setHours(0, 0, 0, 0);

                    if (clickedDate < today) {
                        toastr.error("You cannot edit an unavailability on a past date.", "Error");
                        return;
                    }
                    openEditModal(info.event.id, info.event.extendedProps.nurseId, info.event.startStr);
                },

                dateClick: function (info) {
                    const clickedDate = new Date(info.dateStr);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);

                    if (clickedDate < today) {
                        toastr.error("You cannot create an unavailability on a past date.", "Error");
                        return;
                    }

                    // Check for existing unavailability on the same date
                    const events = calendar.getEvents();
                    const existing = events.find(e => {
                        const eventDate = new Date(e.start);
                        return (
                            eventDate.getFullYear() === clickedDate.getFullYear() &&
                            eventDate.getMonth() === clickedDate.getMonth() &&
                            eventDate.getDate() === clickedDate.getDate()
                        );
                    });

                    if (existing) {
                        toastr.error("You cannot add more than 1 unavailability on the same date.", "Error");
                        return;
                    }

                    openAddModal(info.dateStr);
                }
            });

            calendar.render();
        });

        function openEditModal(id, nurseId, date) {
            // Set the min attribute to today's date (YYYY-MM-DD)
            var todayStr = new Date().toISOString().split("T")[0];
            document.getElementById("editDate").setAttribute("min", todayStr);
            
            document.getElementById("editAvailabilityId").value = id;
            document.getElementById("editNurseID").value = nurseId;
            document.getElementById("editDate").value = date;
            $('#editAvailabilityModal').modal('show');
        }

        function openAddModal(date) {
            var todayStr = new Date().toISOString().split("T")[0];
            document.getElementById("addDate").setAttribute("min", todayStr);
            document.getElementById("addDate").value = date;

            // Grab nurse ID from any existing event (assuming all belong to logged-in user)
            const events = calendar.getEvents();
            if (events.length > 0) {
                const nurseId = events[0].extendedProps.nurseId;
                document.getElementById("addNurseID").value = nurseId;
            } else {
                document.getElementById("addNurseID").value = "USR003";
            }

            $('#addAvailabilityModal').modal('show');
        }

        function closeModal() {
            $('.modal').modal('hide');
        }

        function updateAvailability() {
            let id = document.getElementById("editAvailabilityId").value;
            let nurseID = document.getElementById("editNurseID").value;
            let date = document.getElementById("editDate").value;
            let startTime = "08:00:00";
            let endTime = "16:00:00";

            const clickedDate = new Date(date);
            const events = calendar.getEvents();

            const conflict = events.find(e => {
                const eventDate = new Date(e.start);
                return (
                    e.id != id && // skip the one being updated
                    eventDate.getFullYear() === clickedDate.getFullYear() &&
                    eventDate.getMonth() === clickedDate.getMonth() &&
                    eventDate.getDate() === clickedDate.getDate()
                );
            });

            if (conflict) {
                toastr.error("An availability already exists on this date.", "Error");
                return;
            }

            fetch("/NurseAvailability/Update", {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: new URLSearchParams({
                    availabilityId: id,
                    nurseID: nurseID,
                    date: date,
                    startTime: startTime,
                    endTime: endTime
                })
            }).then(response => {
                if (!response.ok) {
                    throw new Error("Error updating availability.");
                }
                return response.json();
            }).then(data => {
                toastr.success(data.message, "Success");
                closeModal();
                setTimeout(() => { location.reload(); }, 2000);
            }).catch(error => {
                toastr.error(error.message, "Error");
                console.error("Error:", error);
            });
        }

        function deleteAvailability(id) {
            if (confirm("Are you sure you want to delete this availability?")) {
                fetch("/NurseAvailability/Delete/" + id, {
                    method: "POST"
                }).then(response => {
                    if (!response.ok) {
                        throw new Error("Error deleting availability.");
                    }
                    return response.json();
                }).then(data => {
                    toastr.success(data.message, "Success");
                    closeModal();
                    setTimeout(() => { location.reload(); }, 2000);
                }).catch(error => {
                    toastr.error(error.message, "Error");
                    console.error("Error:", error);
                });
            }
        }

        function addAvailability() {
            let date = document.getElementById("addDate").value;
            let startTime = "08:00:00";
            let endTime = "16:00:00";

            const clickedDate = new Date(date);
            const events = calendar.getEvents();

            const conflict = events.find(e => {
                const eventDate = new Date(e.start);
                return (
                    eventDate.getFullYear() === clickedDate.getFullYear() &&
                    eventDate.getMonth() === clickedDate.getMonth() &&
                    eventDate.getDate() === clickedDate.getDate()
                );
            });

            if (conflict) {
                toastr.error("An availability already exists on this date.", "Error");
                return;
            }

            fetch("/NurseAvailability/addAvailability", {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: new URLSearchParams({
                    date: date,
                    startTime: startTime,
                    endTime: endTime
                })
            }).then(response => {
                if (!response.ok) {
                    throw new Error("Error adding availability.");
                }
                return response.json();
            }).then(data => {
                toastr.success(data.message, "Success");
                closeModal();
                setTimeout(() => { location.reload(); }, 2000);
            }).catch(error => {
                toastr.error(error.message, "Error");
                console.error("Error:", error);
            });
        }

    </script>

</head>

<body>
    <h2 style="text-align: center;">My Calendar</h2>

    <div id="calendar"></div>

    <!-- Edit Modal -->
    <div id="editAvailabilityModal" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Availability</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="editAvailabilityForm">
                        <input type="hidden" id="editAvailabilityId">
                        <input type="hidden" id="editStartTime" value="08:00:00">
                        <input type="hidden" id="editEndTime" value="16:00:00">

                        <div class="form-group">
                            <label for="editNurseID">Nurse ID</label>
                            <input type="text" class="form-control" id="editNurseID" readonly>
                        </div>
                        <div class="form-group">
                            <label for="editDate">Date</label>
                            <input type="date" class="form-control" id="editDate">
                        </div>

                        <button type="button" class="btn btn-primary" onclick="updateAvailability()">Save
                            Changes</button>
                        <button type="button" class="btn btn-danger"
                            onclick="deleteAvailability(document.getElementById('editAvailabilityId').value)">Delete</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Modal -->
    <div id="addAvailabilityModal" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Availability</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="addAvailabilityForm">
                        <input type="hidden" id="addStartTime" value="08:00:00">
                        <input type="hidden" id="addEndTime" value="16:00:00">

                        <div class="form-group">
                            <label for="addNurseID">Nurse ID</label>
                            <input type="text" class="form-control" id="addNurseID" readonly>
                        </div>
                        <div class="form-group">
                            <label for="addDate">Date</label>
                            <input type="date" class="form-control" id="addDate">
                        </div>

                        <button type="button" class="btn btn-primary" onclick="addAvailability()">Add
                            Availability</button>
                        <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</body>

</html>
