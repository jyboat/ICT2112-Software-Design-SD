@{
    ViewData["Title"] = "Appointments Calendar";
}

<!DOCTYPE html>
<html>

<head>
    <title>Appointments Calendar</title>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar/index.global.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        #calendar {
            max-width: 1200px;
            margin: 40px auto;
        }

        .patient-card {
            cursor: pointer;
            border-left: 3px solid transparent;
        }

        .patient-card.selected {
            border-left: 3px solid blue;
            background-color: #f0f8ff;
        }

        .service-dot {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 5px;
        }

        .service-complete {
            background-color: green;
        }

        .service-scheduled {
            background-color: grey;
        }

        .service-missed {
            background-color: red;
        }

        .service-backlog {
            background-color: red;
        }

        .service-unknown {
            background-color: red;
        }
    </style>
    <script>
        const doctorsData = @Html.Raw(Json.Serialize(ViewBag.Doctors));
        const patientsData = @Html.Raw(Json.Serialize(ViewBag.Patients));
        const nursesData = @Html.Raw(Json.Serialize(ViewBag.Nurses));
        const serviceTypes = @Html.Raw(Json.Serialize(ViewBag.ServiceNames));
        const currentDoctorID = @Html.Raw(Json.Serialize(ViewBag.DoctorId));

        function loadCalendar(doctorId, patientId, nurseId, location, service) {
            var queryParams = [];
            if (doctorId) queryParams.push('doctorId=' + doctorId);
            if (patientId) queryParams.push('patientId=' + patientId);
            if (nurseId) queryParams.push('nurseId=' + nurseId);
            if (location) queryParams.push('location=' + location);
            if (service) queryParams.push('service=' + service);
            var queryString = queryParams.length ? '?' + queryParams.join('&') : '';

            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                events: '/api/ServiceAppointments/GetAppointmentsForCalendar' + queryString,
                dayMaxEventRows: 3, // limit how many event rows show
                eventTimeFormat: {
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true // show AM/PM
                },
                eventClick: function (info) {
                    const clickedDate = new Date(info.event.startStr);
                    const today = new Date();

                    // Reset time part of 'today' so we only compare dates
                    today.setHours(0, 0, 0, 0);

                    if (clickedDate < today) {
                        toastr.error("You cannot edit an appointment on a past date.", "Error");
                        return;
                    }
                    openEditModal(info.event.id, info.event.extendedProps);

                },


                dateClick: function (info) {
                    const clickedDate = new Date(info.dateStr);
                    const today = new Date();

                    today.setHours(0, 0, 0, 0); // Reset time part of 'today' so we only compare dates

                    if (clickedDate < today) {
                        toastr.error("You cannot edit an appointment on a past date.", "Error");
                        return;
                    }

                    // set the date value in the modal form & make the date field read-only
                    document.getElementById("addDate").value = info.dateStr;
                    document.getElementById("addDate").readOnly = true;

                    openAddModal(info.dateStr);
                }

            });
            calendar.render();
        }

        document.addEventListener('DOMContentLoaded', function () {
            // init calendar
            loadCalendar();



            // filter button
            document.getElementById('filterButton').addEventListener('click', function () {
                event.preventDefault();
                @* var doctorId = document.getElementById('doctorInput').value.trim();
                var patientId = document.getElementById('patientInput').value.trim();
                var nurseId = document.getElementById('nurseInput').value.trim();
                var location = document.getElementById('locationInput').value.trim(); *@
                var doctorId = "";
                var patientId = "";
                var nurseId = "";
                var location = "";

                var service = document.getElementById('serviceInput').value.trim();
                document.getElementById('calendar').innerHTML = '';  // clear calendar
                loadCalendar(doctorId, patientId, nurseId, location, service);
            });

            // reset button
            document.getElementById('resetButton').addEventListener('click', function () {
                event.preventDefault();
                document.getElementById('doctorInput').value = '';
                document.getElementById('patientInput').value = '';
                document.getElementById('nurseInput').value = '';
                document.getElementById('locationInput').value = '';
                document.getElementById('serviceInput').value = '';
                document.getElementById('calendar').innerHTML = '';  // clear calendar
                loadCalendar(); // reload all appointments
            });
        });

        function openEditModal(id, extendedProps) {
            document.getElementById("editAppointmentId").value = id;

            // Populate the dropdowns first
            populateDropdowns();

            // Set the date from the appointment's datetime
            let appointmentDate = new Date(extendedProps.dateTime);
            document.getElementById("editDate").value = appointmentDate.toISOString().split('T')[0];

            // Set the time slot based on the slot value
            document.getElementById("editTimeSlot").value = extendedProps.slot;
            document.getElementById("editSlot").value = extendedProps.slot;

            // Set selected values in dropdowns
            setTimeout(() => {
                document.getElementById("editPatientId").value = extendedProps.patientId;
                document.getElementById("editNurseId").value = extendedProps.nurseId;
                document.getElementById("editServiceType").value = extendedProps.serviceType;
                document.getElementById("editLocation").value = extendedProps.location;
                document.getElementById("editStatus").value = extendedProps.status;
                document.getElementById("editDoctorId").value = extendedProps.doctorId;

            }, 300);

            $('#editAppointmentModal').modal('show');
        }

        function openAddModal(selectedDateTime) {
            // clear the form fields
            document.getElementById("addTimeSlot").value = "";
            document.getElementById("addPatientId").value = "";
            document.getElementById("addNurseId").value = "";
            document.getElementById("addServiceType").value = "";
            document.getElementById("addDoctorID").value = currentDoctorID; // use currentDoctorID from viewbag
            document.getElementById("addDate").readOnly = true;

            populateDropdowns();

            // show the modal
            $('#addAppointmentModal').modal('show');

            loadSuggestedPatients(selectedDateTime);
        }

        function closeModal() {
            $('.modal').modal('hide');
        }

        function validateEditAppointmentForm() {
            let isValid = true;

            // Check each required field
            const fields = ['editPatientId', 'editNurseId', 'editServiceType', 'editTimeSlot', 'editLocation', 'editStatus', 'editDate'];

            fields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (!field.value) {
                    field.classList.add('is-invalid');
                    isValid = false;
                } else {
                    field.classList.remove('is-invalid');
                    field.classList.add('is-valid');
                }
            });

            return isValid;
        }

        function updateAppointment() {
            // Validate form first
            if (!validateEditAppointmentForm()) {
                toastr.warning("Please fill in all required fields", "Warning");
                return;
            }

            let id = document.getElementById("editAppointmentId").value;
            let nurseId = document.getElementById("editNurseId").value;
            let patientId = document.getElementById("editPatientId").value;
            let selectedDate = document.getElementById("editDate").value;
            let selectedTimeSlot = document.getElementById("editTimeSlot").value;
            let location = document.getElementById("editLocation").value;
            let serviceType = document.getElementById("editServiceType").value;
            let status = document.getElementById("editStatus").value;

            // Calculate hour based on the selected time slot
            let hour = parseInt(selectedTimeSlot);

            // Manually construct the ISO DateTime string
            let isoDateTime = `${selectedDate}T${hour.toString().padStart(2, '0')}:00:00.000Z`;

            let requestData = {
                AppointmentId: id,
                PatientId: patientId,
                NurseId: nurseId,
                DoctorId: currentDoctorID, // use currentDoctorID from viewbag
                Service: serviceType,
                Status: status,
                DateTime: isoDateTime,
                Slot: parseInt(selectedTimeSlot),
                Location: location
            };

            fetch("/api/ServiceAppointments/Update", {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(requestData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        closeModal();
                        loadCalendar();
                        toastr.success("Appointment updated successfully!", "Success");
                    } else {
                        toastr.error("Error updating appointment: " + data.message, "Error");
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    toastr.error("An error occurred while updating the appointment.", "Error");
                });
        }

        function deleteAppointment(id) {
            if (confirm("Are you sure you want to delete this appointment?")) {
                fetch("/api/ServiceAppointments/Delete/" + id, {
                    method: "DELETE"
                }).then(response => {
                    if (response.ok) {
                        closeModal();
                        toastr.success("Appointment deleted successfully!", "Success");
                        loadCalendar(); // reload all appointments
                    } else {
                        toastr.error("Error deleting appointment.", "Error");
                    }
                }).catch(error => console.error("Error:", error));
            }
        }

        console.log("Patients data:", patientsData);
        console.log("Nurses data:", nursesData);
        console.log("Services data:", serviceTypes);
        console.log("Doctors data:", doctorsData);


        function generateAppointmentId(length = 20) {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let result = '';

            for (let i = 0; i < length; i++) {
                const randomIndex = Math.floor(Math.random() * chars.length);
                result += chars.charAt(randomIndex);
            }

            return result;
        }

        const populateDropdowns = () => {
            // Populate patient dropdowns
            populateDropdown("addPatientId", patientsData);
            populateDropdown("editPatientId", patientsData);
            populateDropdown("editServiceType", serviceTypes);

            // Populate nurse dropdowns
            populateDropdown("addNurseId", nursesData);
            populateDropdown("editNurseId", nursesData);
            populateDropdown("addServiceType", serviceTypes);
        }

        const populateDropdown = (elementId, options) => {
            const dropdown = document.getElementById(elementId);
            dropdown.innerHTML = '<option value="">Select...</option>';

            // Check if we're dealing with service types (which are just strings)
            if (elementId.includes("ServiceType")) {
                // Handle string values for service types
                options.forEach(option => {
                    const optionElement = document.createElement("option");
                    optionElement.value = option.name;  // Use the string as both value
                    optionElement.text = option.name;   // and display text
                    dropdown.appendChild(optionElement);
                });
            }
            // Skip populating status dropdowns as they're already defined in HTML
            else if (elementId.includes("Status")) {
                // Status dropdown is already populated in HTML
                return;
            }
            else {
                // Handle objects with id/name for patients and nurses
                options.forEach(option => {
                    const optionElement = document.createElement("option");
                    optionElement.value = option.id;
                    optionElement.text = option.name;
                    dropdown.appendChild(optionElement);
                });
            }
        }

        function validateAddAppointmentForm() {
            let isValid = true;
            const form = document.getElementById('addAppointment');

            // check each required field
            const fields = ['addPatientId', 'addNurseId', 'addServiceType', 'addTimeSlot'];

            fields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (!field.value) {
                    field.classList.add('is-invalid');
                    isValid = false;
                } else {
                    field.classList.remove('is-invalid');
                    field.classList.add('is-valid');
                }
            });

            return isValid;
        }

        // update the existing addAppointment function
        function addAppointment() {
            // validate form first
            if (!validateAddAppointmentForm()) {
                toastr.warning("Please fill in all required fields", "Warning");
                return;
            }

            // rest of your existing function...
            let id = generateAppointmentId(20);
            let patientId = document.getElementById("addPatientId").value;
            let nurseId = document.getElementById("addNurseId").value;
            let serviceType = document.getElementById("addServiceType").value;
            let status = "Scheduled"; // default status
            let selectedDate = document.getElementById("addDate").value;
            let selectedTimeSlot = document.getElementById("addTimeSlot").value;
            let location;

            serviceTypes.forEach(function (service) {
                if (serviceType == service.name) {
                    location = service.modality; // set location == modality
                }
            });


            // calc hour based on the selected time slot
            let hour = 8 + parseInt(selectedTimeSlot);

            // manually construct the ISO DateTime string
            let isoDateTime = `${selectedDate}T${hour.toString().padStart(2, '0')}:00:00.000Z`;

            let formData = {
                AppointmentId: id,
                PatientId: patientId,
                NurseId: nurseId,
                DoctorId: currentDoctorID, // use currentDoctorID from viewbag
                Service: serviceType,
                Status: status,
                DateTime: isoDateTime,
                Slot: parseInt(selectedTimeSlot),
                Location: location
            };

            fetch("/api/ServiceAppointments/AddAppt", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(formData)
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => {
                            // log the entire error response for debugging
                            console.error("Error response:", err.message);
                            throw new Error(err.message || "An error occurred");
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    toastr.success("Appointment created successfully.", "Success");
                    $('#addAppointmentModal').modal('hide');
                    loadCalendar();
                })
                .catch(error => {
                    toastr.error("Error: " + error.message, "Error");
                    console.error("Error:", error);
                });
        }


        function loadSuggestedPatients(selectedDateTime) {
            const container = document.getElementById('suggestedPatients');
            container.innerHTML = '';

            // fetch(`/api/ServiceAppointments/GetPatientsByDate?selectedDateTime=${selectedDateTime}`)
            fetch(`/api/ServiceAppointments/GetSuggestedPatients`)
                .then(async response => {
                    if (!response.ok) {
                        throw new Error("Server returned error: " + response.status);
                    }

                    const contentType = response.headers.get("Content-Type") || "";
                    if (!contentType.includes("application/json")) {
                        throw new Error("Expected JSON but got: " + contentType);
                    }

                    return response.json(); // only run if JSON is valid
                })
                .then(data => {
                    const patients = Array.isArray(data) ? data : [data];

                    patients.forEach(patient => {
                        const services = Array.isArray(patient.services) ? patient.services : [];

                        const card = document.createElement('div');
                        card.className = 'card mb-2 patient-card';
                        card.innerHTML = `
                    <div class="card-body py-2">
                        <h6 class="card-title mb-1">Patient ID: ${patient.patientId}</h6>
                        <div>
                            ${services.map(service =>
                            `<span class="service-dot ${getDotClass(service.status)}"
                                    title="${service.service}: ${service.status}"></span>`
                        ).join('')}
                        </div>

                        <div class="mt-2">
                        <strong>Services Requiring Attention:</strong>
                        <ol>
                            ${services
                                .filter(service => !service.status || service.status === "Missed" || service.status === "Backlog")
                                .map(service => `<li>${service.service}</li>`)
                                .join('')}
                        </ol>
                        </div>
                    </div>
                `;

                        // Add click handler
                        card.addEventListener('click', () => {
                            // Redirect to another page with patientId as a query parameter

                            window.location.href = `/ServiceStatus/Index?patientId=${patient.patientId}`;
                        });


                        container.appendChild(card);
                    });

                })
                .catch(error => {
                    console.error("Error loading patients:", error);
                    toastr.error("Failed to load patients.");
                });
        }


        function getDotClass(status) {
            switch ((status || "").toLowerCase()) {
                case "completed": return "service-complete";
                case "scheduled": return "service-scheduled";
                case "missed": return "service-missed";
                case "backlog": return "service-backlog";
                default: return "service-unknown";
            }
        }

    </script>
</head>

<body>
    <h2 style="text-align: center;">Service Appointments Calendar</h2>

    <form class="mb-4">
        <div class="form-row">
            <!-- Doctor Dropdown -->
            @* <div class="col">
                <label for="doctorInput">Doctor</label>
                <select id="doctorInput" class="form-control">
                    <option value="">Select Doctor...</option>
                    @foreach (var doctor in ViewBag.Doctors)
                    {
                        <option value="@doctor.id">@doctor.id</option>
                    }
                </select>
            </div> *@

            <!-- Patient Dropdown -->
            @* <div class="col">
                <label for="patientInput">Patient</label>
                <select id="patientInput" class="form-control">
                    <option value="">Select Patient...</option>
                    @foreach (var patient in ViewBag.Patients)
                    {
                        <option value="@patient.id">@patient.id</option>
                    }
                </select>
            </div> *@

            <!-- Nurse Dropdown -->
            @* <div class="col">
                <label for="nurseInput">Nurse</label>
                <select id="nurseInput" class="form-control">
                    <option value="">Select Nurse...</option>
                    @foreach (var nurse in ViewBag.Nurses)
                    {
                        <option value="@nurse.id">@nurse.id</option>
                    }
                </select>
            </div> *@

            <!-- Location Dropdown -->
            @* <div class="col">
                <label for="locationInput">Location</label>
                <select id="locationInput" class="form-control">
                    <option value="">Select Location...</option>
                    @foreach (var location in ViewBag.Locations)
                    {
                        <option value="@location.id">@location.id</option>
                    }
                </select>
            </div> *@

            <!-- Service Dropdown -->
            <div class="col">
                <select id="serviceInput" class="form-control">
                    <option value="">Select Service...</option>
                    @foreach (var service in ViewBag.ServiceNames)
                    {
                        <option value="@service.Name">@service.Name</option>
                    }
                </select>
            </div>

            <!-- Filter and Reset Buttons -->
            <div class="col">
                <button id="filterButton" class="btn btn-success">Filter</button>
                <button id="resetButton" class="btn btn-primary">Reset Filters</button>
            </div>
        </div>
    </form>

    <div class="d-flex flex-wrap gap-2">
        <a href="/api/ServiceAppointments/CreatePage" class="btn btn-primary me-2">Manual Assign Appointment</a>
        <a href="/api/ServiceAppointments/AutoScheduling" class="btn btn-primary me-2">Auto Assign Appointment</a>
        <a href="/ServiceBacklog/Index" class="btn btn-primary">Backlog 🤮</a>
    </div>

    <div id="calendar"></div>

    <!-- Edit Appointment Modal -->
    <div id="editAppointmentModal" class="modal fade" tabi ndex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Edit Appointment</h5>
                    <button type="button" class="close text-white btn btn-danger" data-dismiss="modal"
                        aria-label="Close" onclick="closeModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="editAppointmentForm">
                        <input type="hidden" id="editAppointmentId">
                        <input id="editDoctorId" class="form-control bg-light" readonly>

                        <!-- Patient Selection -->
                        <div class="form-group mb-3">
                            <label for="editPatientId">Select Patient</label>
                            <select class="form-control" id="editPatientId" required>
                                <option value="">Select Patient...</option>
                            </select>
                            <div class="invalid-feedback">Please select a patient</div>
                        </div>

                        <!-- Nurse Selection -->
                        <div class="form-group mb-3">
                            <label for="editNurseId">Select Nurse</label>
                            <select class="form-control" id="editNurseId" required>
                                <option value="">Select Nurse...</option>
                            </select>
                            <div class="invalid-feedback">Please select a nurse</div>
                        </div>

                        <!-- Service Type -->
                        <div class="form-group mb-3">
                            <label for="editServiceType">Select Service Type</label>
                            <select class="form-control" id="editServiceType" required>
                                @if (ViewBag.ServiceNames != null)
                                {
                                    foreach (ClearCare.Models.Entities.ServiceType_SDM service in ViewBag.ServiceNames)
                                    {
                                        <option value="@service.Name">@service.Name</option>
                                    }
                                }
                            </select>
                            <div class="invalid-feedback">Please select a service type</div>
                        </div>

                        <!-- Location Selection -->
                        <div class="form-group mb-3">
                            <label for="editLocation">Location</label>
                            <input class="form-control" id="editLocation" readonly>
                            <div class="invalid-feedback">Please select a location</div>
                        </div>

                        <!-- Date and Time Selection -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="editDate">Date:</label>
                                    <input type="date" id="editDate" class="form-control" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="editTimeSlot">Time Slot:</label>
                                    <select id="editTimeSlot" class="form-control" required>
                                        <option value="">Select Time Slot</option>
                                        <option value="0">08:00 - 09:00</option>
                                        <option value="1">09:00 - 10:00</option>
                                        <option value="2">10:00 - 11:00</option>
                                        <option value="3">11:00 - 12:00</option>
                                        <option value="4">12:00 - 13:00</option>
                                        <option value="5">13:00 - 14:00</option>
                                        <option value="6">14:00 - 15:00</option>
                                        <option value="7">15:00 - 16:00</option>
                                    </select>
                                    <div class="invalid-feedback">Please select a time slot</div>
                                    <input type="hidden" id="editSlot">
                                </div>
                            </div>
                        </div>
                        <!-- Status Selection -->
                        <div class="form-group mb-3">
                            <label for="editStatus">Status</label>
                            <select class="form-control" id="editStatus" required>
                                <option value="">Select Status...</option>
                                <option value="Scheduled">Scheduled</option>
                                <option value="Completed">Completed</option>
                                <option value="Backlog" hidden>Backlog</option>
                                <option value="Missed" hidden>Missed</option>
                            </select>
                            <div class="invalid-feedback">Please select a status</div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="form-group text-right mt-4">
                            <button type="button" class="btn btn-danger mr-2"
                                onclick="deleteAppointment(document.getElementById('editAppointmentId').value)">Delete</button>
                            <button type="button" class="btn btn-primary" onclick="updateAppointment()">Save
                                Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Modal -->
    <div id="addAppointmentModal" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Add Appointment</h5>
                    <button type="button" class="close text-white btn btn-danger" data-dismiss="modal"
                        aria-label="Close" onclick="closeModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="addAppointment">
                        <input type="hidden" id="addAppointmentId">
                        <input id="addDoctorID" class="form-control bg-light" readonly>


                        <!-- Patient Selection -->
                        <div class="form-group mb-3">
                            <label for="addPatientId">Select Patient</label>
                            <select class="form-control" id="addPatientId" required>
                                <option value="">Select Patient...</option>
                            </select>
                            <div class="invalid-feedback">Please select a patient</div>
                        </div>

                        <!-- Nurse Selection -->
                        <div class="form-group mb-3">
                            <label for="addNurseId">Select Nurse</label>
                            <select class="form-control" id="addNurseId" required>
                                <option value="">Select Nurse...</option>
                            </select>
                            <div class="invalid-feedback">Please select a nurse</div>
                        </div>

                        <!-- Service Type -->
                        <div class="form-group mb-3">
                            <label for="addServiceType">Select Service Type</label>
                            <select class="form-control" id="addServiceType" required>
                                <option value="">Select Service Type</option>
                                @if (ViewBag.ServiceNames != null)
                                {
                                    foreach (ClearCare.Models.Entities.ServiceType_SDM service in ViewBag.ServiceNames)
                                    {
                                        <option value="@service.Name">@service.Name</option>
                                    }
                                }
                            </select>
                            <div class="invalid-feedback">Please select a service type</div>
                        </div>

                        <!-- Date and Time Selection -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="addDate">Date:</label>
                                    <input type="date" id="addDate" name="Date" class="form-control bg-light" required
                                        readonly>
                                    <small class="text-muted">Selected from calendar</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="addTimeSlot">Time Slot:</label>
                                    <select id="addTimeSlot" name="TimeSlot" class="form-control" required>
                                        <option value="">Select Time Slot</option>
                                        <option value="0">08:00 - 09:00</option>
                                        <option value="1">09:00 - 10:00</option>
                                        <option value="2">10:00 - 11:00</option>
                                        <option value="3">11:00 - 12:00</option>
                                        <option value="4">12:00 - 13:00</option>
                                        <option value="5">13:00 - 14:00</option>
                                        <option value="6">14:00 - 15:00</option>
                                        <option value="7">15:00 - 16:00</option>
                                    </select>
                                    <div class="invalid-feedback">Please select a time slot</div>
                                </div>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="form-group text-right mt-4">
                            <button type="button" class="btn btn-secondary mr-2" onclick="closeModal()">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="addAppointment()">Add
                                Appointment</button>
                        </div>
                    </form>

                    <hr class="my-4">
                    <h6>Suggested Patients</h6>
                    <div id="suggestedPatients" style="max-height: 250px; overflow-y: auto;">
                        <!-- Cards will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

</html>
