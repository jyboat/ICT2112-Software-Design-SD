@{
    ViewData["Title"] = "Appointments Calendar";
}

<!DOCTYPE html>
<html>

<head>
    <title>Appointments Calendar</title>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar/index.global.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        #calendar {
            max-width: 1200px;
            margin: 40px auto;
        }
    </style>
    <script>
        const patientsData = @Html.Raw(Json.Serialize(ViewBag.Patients));
        const nursesData = @Html.Raw(Json.Serialize(ViewBag.Nurses));
        const serviceTypes = @Html.Raw(Json.Serialize(ViewBag.ServiceNames));
        const DoctorId = @Html.Raw(Json.Serialize(ViewBag.DoctorId));

        function loadCalendar(doctorId, patientId, nurseId, location, service) {
            var queryParams = [];
            if (doctorId) queryParams.push('doctorId=' + doctorId);
            if (patientId) queryParams.push('patientId=' + patientId);
            if (nurseId) queryParams.push('nurseId=' + nurseId);
            if (location) queryParams.push('location=' + location);
            if (service) queryParams.push('service=' + service);
            var queryString = queryParams.length ? '?' + queryParams.join('&') : '';

            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                events: '/api/ServiceAppointments/GetAppointmentsForCalendar' + queryString,
                dayMaxEventRows: 3, // limit how many event rows show
                eventTimeFormat: {
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true // show AM/PM
                },
                eventClick: function (info) {
                    const clickedDate = new Date(info.event.startStr);
                    const today = new Date();

                    // Reset time part of 'today' so we only compare dates
                    today.setHours(0, 0, 0, 0);

                    if (clickedDate < today) {
                        toastr.error("You cannot edit an appointment on a past date.", "Error");
                        return;
                    }
                    openEditModal(info.event.id, info.event.extendedProps);

                },


                dateClick: function (info) {
                    console.log("Clicked date:", info.dateStr);
                    
                    const clickedDate = new Date(info.dateStr);
                    const today = new Date();
                    
                    today.setHours(0, 0, 0, 0); // Reset time part of 'today' so we only compare dates

                    if (clickedDate < today) {
                        toastr.error("You cannot edit an appointment on a past date.", "Error");
                        return;
                    }

                    // set the date value in the modal form & make the date field read-only
                    document.getElementById("addDate").value = info.dateStr;
                    document.getElementById("addDate").readOnly = true;
                    
                    openAddModal();
                }

            });
            calendar.render();
        }

        document.addEventListener('DOMContentLoaded', function () {
            // init calendar
            loadCalendar();

            // filter button
            document.getElementById('filterButton').addEventListener('click', function () {
                event.preventDefault(); 
                var doctorId = document.getElementById('doctorInput').value.trim();
                var patientId = document.getElementById('patientInput').value.trim();
                var nurseId = document.getElementById('nurseInput').value.trim();
                var location = document.getElementById('locationInput').value.trim();
                var service = document.getElementById('serviceInput').value.trim();
                document.getElementById('calendar').innerHTML = '';  // clear calendar
                loadCalendar(doctorId, patientId, nurseId, location, service);
            });

            // reset button
            document.getElementById('resetButton').addEventListener('click', function () {
                event.preventDefault(); 
                document.getElementById('doctorInput').value = '';
                document.getElementById('patientInput').value = '';
                document.getElementById('nurseInput').value = '';
                document.getElementById('locationInput').value = '';
                document.getElementById('serviceInput').value = '';
                document.getElementById('calendar').innerHTML = '';  // clear calendar
                loadCalendar(); // reload all appointments
            });
        });

        function openEditModal(id, extendedProps) {
            document.getElementById("editAppointmentId").value = id;

            // Populate the dropdowns first
            populateDropdowns();

            // Set the date from the appointment's datetime
            let appointmentDate = new Date(extendedProps.dateTime);
            document.getElementById("editDate").value = appointmentDate.toISOString().split('T')[0];

            // Set the time slot based on the slot value
            document.getElementById("editTimeSlot").value = extendedProps.slot;
            document.getElementById("editSlot").value = extendedProps.slot;

            // Set selected values in dropdowns
            setTimeout(() => {
                document.getElementById("editPatientId").value = extendedProps.patientId;
                document.getElementById("editNurseId").value = extendedProps.nurseId;
                document.getElementById("editServiceType").value = extendedProps.serviceType;
                document.getElementById("editLocation").value = extendedProps.location;
                document.getElementById("editStatus").value = extendedProps.status;
                document.getElementById("editDoctorId").value = extendedProps.doctorId;
            }, 300);

            $('#editAppointmentModal').modal('show');
        }

        function openAddModal() {
            // clear the form fields
            document.getElementById("addTimeSlot").value = "";
            document.getElementById("addLocation").value = "";
            document.getElementById("addPatientId").value = "";
            document.getElementById("addNurseId").value = "";
            document.getElementById("addServiceType").value = "";

            document.getElementById("addDate").readOnly = true;

            populateDropdowns();

            // show the modal
            $('#addAppointmentModal').modal('show');
        }

        function closeModal() {
            $('.modal').modal('hide');
        }

        function validateEditAppointmentForm() {
            let isValid = true;

            // Check each required field
            const fields = ['editPatientId', 'editNurseId', 'editServiceType', 'editTimeSlot', 'editLocation', 'editStatus', 'editDate'];

            fields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (!field.value) {
                    field.classList.add('is-invalid');
                    isValid = false;
                } else {
                    field.classList.remove('is-invalid');
                    field.classList.add('is-valid');
                }
            });

            return isValid;
        }

        function updateAppointment() {
            // Validate form first
            if (!validateEditAppointmentForm()) {
                toastr.warning("Please fill in all required fields", "Warning");
                return;
            }

            let id = document.getElementById("editAppointmentId").value;
            let doctorId = document.getElementById("editDoctorId").value;
            let nurseId = document.getElementById("editNurseId").value;
            let patientId = document.getElementById("editPatientId").value;
            let selectedDate = document.getElementById("editDate").value;
            let selectedTimeSlot = document.getElementById("editTimeSlot").value;
            let location = document.getElementById("editLocation").value;
            let serviceType = document.getElementById("editServiceType").value;
            let status = document.getElementById("editStatus").value;

            // Calculate hour based on the selected time slot
            let hour = parseInt(selectedTimeSlot);

            // Manually construct the ISO DateTime string
            let isoDateTime = `${selectedDate}T${hour.toString().padStart(2, '0')}:00:00.000Z`;

            let requestData = {
                AppointmentId: id,
                PatientId: patientId,
                NurseId: nurseId,
                DoctorId: doctorId,
                ServiceTypeId: serviceType,
                Status: status,
                DateTime: isoDateTime,
                Slot: parseInt(selectedTimeSlot),
                Location: location
            };

            fetch("/api/ServiceAppointments/Update", {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(requestData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        closeModal();
                        loadCalendar();
                        toastr.success("Appointment updated successfully!", "Success");
                    } else {
                        toastr.error("Error updating appointment: " + data.message, "Error");
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    toastr.error("An error occurred while updating the appointment.", "Error");
                });
        }

        function deleteAppointment(id) {
            if (confirm("Are you sure you want to delete this appointment?")) {
                fetch("/api/ServiceAppointments/Delete/" + id, {
                    method: "DELETE"
                }).then(response => {
                    if (response.ok) {
                        closeModal();
                        toastr.success("Appointment deleted successfully!", "Success");
                        loadCalendar(); // reload all appointments
                    } else {
                        toastr.error("Error deleting appointment.", "Error");
                    }
                }).catch(error => console.error("Error:", error));
            }
        }

        console.log("Patients data:", patientsData);
        console.log("Nurses data:", nursesData);
        console.log("Services data:", serviceTypes);


        function generateAppointmentId(length = 20) {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let result = '';

            for (let i = 0; i < length; i++) {
                const randomIndex = Math.floor(Math.random() * chars.length);
                result += chars.charAt(randomIndex);
            }

            return result;
        }

        const populateDropdowns = () => {
            // Populate patient dropdowns
            populateDropdown("addPatientId", patientsData);
            populateDropdown("editPatientId", patientsData);
            populateDropdown("editServiceType", serviceTypes);

            // Populate nurse dropdowns
            populateDropdown("addNurseId", nursesData);
            populateDropdown("editNurseId", nursesData);
            populateDropdown("addServiceType", serviceTypes);
        }

        const populateDropdown = (elementId, options) => {
            const dropdown = document.getElementById(elementId);
            dropdown.innerHTML = '<option value="">Select...</option>';

            // Check if we're dealing with service types (which are just strings)
            if (elementId.includes("ServiceType")) {
                // Handle string values for service types
                options.forEach(option => {
                    const optionElement = document.createElement("option");
                    optionElement.value = option;  // Use the string as both value
                    optionElement.text = option;   // and display text
                    dropdown.appendChild(optionElement);
                });
            }
            // Skip populating status dropdowns as they're already defined in HTML
            else if (elementId.includes("Status")) {
                // Status dropdown is already populated in HTML
                return;
            }
            else {
                // Handle objects with id/name for patients and nurses
                options.forEach(option => {
                    const optionElement = document.createElement("option");
                    optionElement.value = option.id;
                    optionElement.text = option.name;
                    dropdown.appendChild(optionElement);
                });
            }
        }

        function validateAddAppointmentForm() {
            let isValid = true;
            const form = document.getElementById('addAppointment');

            // check each required field
            const fields = ['addPatientId', 'addNurseId', 'addServiceType', 'addTimeSlot', 'addLocation'];

            fields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (!field.value) {
                    field.classList.add('is-invalid');
                    isValid = false;
                } else {
                    field.classList.remove('is-invalid');
                    field.classList.add('is-valid');
                }
            });

            return isValid;
        }

        // update the existing addAppointment function
        function addAppointment() {
            // validate form first
            if (!validateAddAppointmentForm()) {
                toastr.warning("Please fill in all required fields", "Warning");
                return;
            }

            // rest of your existing function...
            let id = generateAppointmentId(20);
            let patientId = document.getElementById("addPatientId").value;
            let nurseId = document.getElementById("addNurseId").value;
            let doctorId = document.getElementById("addDoctorID").value;
            let serviceType = document.getElementById("addServiceType").value;
            let status = "PENDING" // default status
            let selectedDate = document.getElementById("addDate").value;
            let selectedTimeSlot = document.getElementById("addTimeSlot").value;
            let location = document.getElementById("addLocation").value;

            // calc hour based on the selected time slot
            let hour = 8 + parseInt(selectedTimeSlot);

            // manually construct the ISO DateTime string
            let isoDateTime = `${selectedDate}T${hour.toString().padStart(2, '0')}:00:00.000Z`;

            let formData = {
                AppointmentId: id || "dummy123",
                PatientId: patientId,
                NurseId: nurseId,
                DoctorId: doctorId || "1",
                ServiceTypeId: serviceType,
                Status: status,
                DateTime: isoDateTime,
                Slot: parseInt(selectedTimeSlot),
                Location: location
            };

            fetch("/api/ServiceAppointments/AddAppt", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(formData)
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => {
                            // log the entire error response for debugging
                            console.error("Error response:", err.message);
                            throw new Error(err.message || "An error occurred");
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    toastr.success("Appointment created successfully.", "Success");
                    console.log("Response:", data);
                    $('#addAppointmentModal').modal('hide');
                    loadCalendar();
                })
                .catch(error => {
                    toastr.error("Error: " + error.message, "Error");
                    console.error("Error:", error);
                });
        }
    </script>
</head>

<body>
    <h2 style="text-align: center;">Service Appointments Calendar</h2>

    <form>
        <div class="form-row">
            <div class="col">
                <input type="text" id="doctorInput" class="form-control" placeholder="Enter Doctor ID">
            </div>
            <div class="col">
                <input type="text" id="patientInput" class="form-control" placeholder="Enter Patient ID">

            </div>
            <div class="col">
                <input type="text" id="nurseInput" class="form-control" placeholder="Enter Nurse ID">

            </div>
            <div class="col">
                <input type="text" id="locationInput" class="form-control" placeholder="Enter Location">

            </div>

            <div class="col">
                <input type="text" id="serviceInput" class="form-control" placeholder="Enter Service">
            </div>

            <button id="filterButton" class="btn btn-success">Filter</button>
            <button id="resetButton" class="btn btn-primary">Reset Filters</button>
        </div>
    </form>

    <div id="calendar"></div>

    <!-- Edit Appointment Modal -->
    <div id="editAppointmentModal" class="modal fade" tabi ndex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Edit Appointment</h5>
                    <button type="button" class="close text-white btn btn-danger" data-dismiss="modal" aria-label="Close" onclick="closeModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="editAppointmentForm">
                        <input type="hidden" id="editAppointmentId">
                        <!-- Hidden Doctor ID -->
                        <input type="hidden" id="editDoctorId" value="DOC001">

                        <!-- Patient Selection -->
                        <div class="form-group mb-3">
                            <label for="editPatientId">Select Patient</label>
                            <select class="form-control" id="editPatientId" required>
                                <option value="">Select Patient...</option>
                            </select>
                            <div class="invalid-feedback">Please select a patient</div>
                        </div>

                        <!-- Nurse Selection -->
                        <div class="form-group mb-3">
                            <label for="editNurseId">Select Nurse</label>
                            <select class="form-control" id="editNurseId" required>
                                <option value="">Select Nurse...</option>
                            </select>
                            <div class="invalid-feedback">Please select a nurse</div>
                        </div>

                        <!-- Service Type -->
                        <div class="form-group mb-3">
                            <label for="editServiceType">Select Service Type</label>
                            <select class="form-control" id="editServiceType" required>
                                <option value="">Select Service Type...</option>
                            </select>
                            <div class="invalid-feedback">Please select a service type</div>
                        </div>

                        <!-- Date and Time Selection -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="editDate">Date:</label>
                                    <input type="date" id="editDate" class="form-control" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="editTimeSlot">Time Slot:</label>
                                    <select id="editTimeSlot" class="form-control" required>
                                        <option value="">Select Time Slot</option>
                                        <option value="0">08:00 - 09:00</option>
                                        <option value="1">09:00 - 10:00</option>
                                        <option value="2">10:00 - 11:00</option>
                                        <option value="3">11:00 - 12:00</option>
                                        <option value="4">12:00 - 13:00</option>
                                        <option value="5">13:00 - 14:00</option>
                                        <option value="6">14:00 - 15:00</option>
                                        <option value="7">15:00 - 16:00</option>
                                    </select>
                                    <div class="invalid-feedback">Please select a time slot</div>
                                    <input type="hidden" id="editSlot">
                                </div>
                            </div>
                        </div>

                        <!-- Location Selection -->
                        <div class="form-group mb-3">
                            <label for="editLocation">Location</label>
                            <select class="form-control" id="editLocation" required>
                                <option value="">Select Location...</option>
                                <option value="PHYSICAL">Physical</option>
                                <option value="VIRTUAL">Virtual</option>
                            </select>
                            <div class="invalid-feedback">Please select a location</div>
                        </div>

                        <!-- Status Selection -->
                        <div class="form-group mb-3">
                            <label for="editStatus">Status</label>
                            <select class="form-control" id="editStatus" required>
                                <option value="">Select Status...</option>
                                <option value="PENDING">Pending</option>
                                <option value="CONFIRMED">Missed</option>
                                <option value="COMPLETED">Completed</option>
                            </select>
                            <div class="invalid-feedback">Please select a status</div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="form-group text-right mt-4">
                            <button type="button" class="btn btn-danger mr-2" onclick="deleteAppointment(document.getElementById('editAppointmentId').value)">Delete</button>
                            <button type="button" class="btn btn-primary" onclick="updateAppointment()">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Modal -->
    <div id="addAppointmentModal" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Add Appointment</h5>
                    <button type="button" class="close text-white btn btn-danger" data-dismiss="modal" aria-label="Close" onclick="closeModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="addAppointment">
                        <input type="hidden" id="addAppointmentId">

                        <!-- Patient Selection -->
                        <div class="form-group mb-3">
                            <label for="addPatientId">Select Patient</label>
                            <select class="form-control" id="addPatientId" required>
                                <option value="">Select Patient...</option>
                            </select>
                            <div class="invalid-feedback">Please select a patient</div>
                        </div>

                        <!-- Nurse Selection -->
                        <div class="form-group mb-3">
                            <label for="addNurseId">Select Nurse</label>
                            <select class="form-control" id="addNurseId" required>
                                <option value="">Select Nurse...</option>
                            </select>
                            <div class="invalid-feedback">Please select a nurse</div>
                        </div>

                        <!-- Hidden Doctor ID -->
                        <input type="hidden" id="addDoctorID" value="DOC001">

                        <!-- Service Type -->
                        <div class="form-group mb-3">
                            <label for="addServiceType">Select Service Type</label>
                            <select class="form-control" id="addServiceType" required>
                                <option value="">Select Service Type...</option>
                            </select>
                            <div class="invalid-feedback">Please select a service type</div>
                        </div>

                        <!-- Date and Time Selection -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="addDate">Date:</label>
                                    <input type="date" id="addDate" name="Date" class="form-control bg-light" required readonly>
                                    <small class="text-muted">Selected from calendar</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="addTimeSlot">Time Slot:</label>
                                    <select id="addTimeSlot" name="TimeSlot" class="form-control" required>
                                        <option value="">Select Time Slot</option>
                                        <option value="0">08:00 - 09:00</option>
                                        <option value="1">09:00 - 10:00</option>
                                        <option value="2">10:00 - 11:00</option>
                                        <option value="3">11:00 - 12:00</option>
                                        <option value="4">12:00 - 13:00</option>
                                        <option value="5">13:00 - 14:00</option>
                                        <option value="6">14:00 - 15:00</option>
                                        <option value="7">15:00 - 16:00</option>
                                    </select>
                                    <div class="invalid-feedback">Please select a time slot</div>
                                </div>
                            </div>
                        </div>

                        <!-- Location Selection -->
                        <div class="form-group mb-3">
                            <label for="addLocation">Location</label>
                            <select class="form-control" id="addLocation" required>
                                <option value="">Select Location...</option>
                                <option value="PHYSICAL">Physical</option>
                                <option value="VIRTUAL">Virtual</option>
                            </select>
                            <div class="invalid-feedback">Please select a location</div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="form-group text-right mt-4">
                            <button type="button" class="btn btn-secondary mr-2" onclick="closeModal()">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="addAppointment()">Add Appointment</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</body>

</html>
