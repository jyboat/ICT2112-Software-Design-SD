@{
    var analytics = ViewData["AppointmentAnalytics"] as Dictionary<string, object>;
    var appointmentsPerType = analytics?["AppointmentsPerType"] as Dictionary<string, int>;
    var appointmentsPerDoctor = analytics?["AppointmentsPerDoctor"] as Dictionary<string, int>;
    var appointmentsPerMonth = analytics?["AppointmentsPerMonth"] as Dictionary<string, int>;
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container mt-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center">
        <h2 class="fw-bold">Service Appointments Dashboard</h2>
        <h5 class="text-muted">March 2025</h5>
    </div>
    
    <!-- Summary Metrics (Widgets) -->
    <div class="row text-center mt-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white shadow p-3">
                <h6>Total Appointments</h6>
                <h3>@analytics?["TotalAppointments"]</h3>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white shadow p-3">
                <h6>Completed Appointments</h6>
                <h3>@analytics?["CompletedAppointments"]</h3>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-dark shadow p-3">
                <h6>Pending Appointments</h6>
                <h3>@analytics?["PendingAppointments"]</h3>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger text-white shadow p-3">
                <h6>Cancelled Appointments</h6>
                <h3>@analytics?["CancelledAppointments"]</h3>
            </div>
        </div>
    </div>

      <!-- Graph Section -->
    <div class="row mt-4">
        <!-- Line Chart: Appointments Over Time -->
        <div class="col-md-8">
            <div class="card shadow p-4">
                <h5 class="text-center">Appointments Over Time</h5>
                <div style="width: 100%; height: 300px;">
                    <canvas id="appointmentsOverTimeChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Doughnut Chart: Appointment Status Breakdown -->
        <div class="col-md-4">
            <div class="card shadow p-4">
                <h5 class="text-center">Status Breakdown</h5>
                <div style="width: 250px; height: 250px; margin: auto;">
                    <canvas id="appointmentStatusChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <!-- Bar Chart: Appointments Per Service Type -->
        <div class="col-md-6">
            <div class="card shadow p-4">
                <h5 class="text-center">Per Service Type</h5>
                <div style="width: 100%; height: 250px;">
                    <canvas id="appointmentsPerServiceChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Bar Chart: Appointments Per Doctor -->
        <div class="col-md-6">
            <div class="card shadow p-4">
                <h5 class="text-center">Per Doctor</h5>
                <div style="width: 100%; height: 250px;">
                    <canvas id="appointmentsPerDoctorChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript for Charts -->
<script>
    // Doughnut Chart: Appointment Status Breakdown
    var ctx1 = document.getElementById('appointmentStatusChart').getContext('2d');
    new Chart(ctx1, {
        type: 'doughnut',
        data: {
            labels: ['Completed', 'Pending', 'Cancelled'],
            datasets: [{
                data: [@analytics?["CompletedAppointments"], @analytics?["PendingAppointments"], @analytics?["CancelledAppointments"]],
                backgroundColor: ['#28a745', '#ffc107', '#dc3545']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false
        }
    });

    // Line Chart: Appointments Over Time
    var ctx2 = document.getElementById('appointmentsOverTimeChart').getContext('2d');
    var appointmentsPerMonth = @Html.Raw(Json.Serialize(appointmentsPerMonth ?? new Dictionary<string, int>()));
    new Chart(ctx2, {
        type: 'line',
        data: {
            labels: Object.keys(appointmentsPerMonth),
            datasets: [{
                label: 'Total Appointments',
                data: Object.values(appointmentsPerMonth),
                borderColor: '#007bff',
                backgroundColor: 'rgba(0, 123, 255, 0.2)',
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false
        }
    });

    // Bar Chart: Appointments Per Service Type
    var ctx3 = document.getElementById('appointmentsPerServiceChart').getContext('2d');
    var appointmentsPerType = @Html.Raw(Json.Serialize(appointmentsPerType ?? new Dictionary<string, int>()));
    new Chart(ctx3, {
        type: 'bar',
        data: {
            labels: Object.keys(appointmentsPerType),
            datasets: [{
                label: 'Appointments',
                data: Object.values(appointmentsPerType),
                backgroundColor: '#17a2b8'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: { beginAtZero: true }
            }
        }
    });

    // Bar Chart: Appointments Per Doctor
    var ctx4 = document.getElementById('appointmentsPerDoctorChart').getContext('2d');
    var appointmentsPerDoctor = @Html.Raw(Json.Serialize(appointmentsPerDoctor ?? new Dictionary<string, int>()));
    new Chart(ctx4, {
        type: 'bar',
        data: {
            labels: Object.keys(appointmentsPerDoctor),
            datasets: [{
                label: 'Appointments',
                data: Object.values(appointmentsPerDoctor),
                backgroundColor: '#ff9800'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: { beginAtZero: true }
            }
        }
    });
</script>
