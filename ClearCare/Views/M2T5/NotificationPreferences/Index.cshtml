@{
    ViewData["Title"] = "Notifications";
}

@{
    var userRole = Context.Session.GetString("Role");
    var userId = Context.Session.GetString("UserID");
}
<div class="container mt-4"><h2>@ViewData["Title"]</h2></div>
<!-- Notification settings -->
<div class="container mt-4">
    <!-- Preferred Notification Methods -->
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">Preferred Notification Methods</h5>
            <p class="text-muted">Choose how you would like to receive notifications.</p>

            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <label for="smsNotification" class="d-block">SMS</label>
                    <p class="text-muted small mb-0">Receive text messages directly to your phone.</p>
                </div>
                <div class="form-check form-switch" style="min-width: 50px;">
                    <input class="form-check-input" type="checkbox" id="smsNotification">
                </div>
            </div>

            <div class="d-flex justify-content-between align-items-center mt-2">
                <div>
                    <label for="emailNotification" class="d-block">Email</label>
                    <p class="text-muted small mb-0">Get notifications via email for important updates.</p>
                </div>
                <div class="form-check form-switch" style="min-width: 50px;">
                    <input class="form-check-input" type="checkbox" id="emailNotification">
                </div>
            </div>
        </div>
    </div>


<!-- Do Not Disturb Settings (Always Visible) -->
<div id="dndSettings">
    <!-- DND Days Selection -->
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">Select Days for Do Not Disturb</h5>
            <div class="form-group">
                <label for="dayRange">Select Day Range:</label>
                <select class="form-control w-100" id="dayRange">
                    <option value="none">None</option> 
                    <option value="daily">Daily</option>
                    <option value="weekdays">Weekdays</option>
                    <option value="weekends">Weekends</option>
                    <option value="custom">Custom</option>
                </select>
            </div>

            <!-- Custom Day Checkboxes (only visible when "Custom" is selected) -->
            <div id="customDays" class="d-none mt-3">
                <div class="d-flex flex-wrap">
                    @foreach (var day in new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }) {
                        <div class="form-check me-3">
                            <input type="checkbox" class="form-check-input" id="@day.ToLower()">
                            <label class="form-check-label" for="@day.ToLower()">@day</label>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

<!-- DND Time Range -->
<div class="card mb-3">
    <div class="card-body">
        <h5 class="card-title">Select Time Range for Do Not Disturb</h5>
        <div class="form-group">
            <label for="dndStartTime">Start Time:</label>
            <input type="time" class="form-control w-100" id="dndStartTime" value="">
        </div>
        <div class="form-group mt-2">
            <label for="dndEndTime">End Time:</label>
            <input type="time" class="form-control w-100" id="dndEndTime" value="">
        </div>
    </div>
</div>



<!-- Move the "Save Preferences" button outside any conditional blocks -->
<div class="container">
    <button onclick="saveNotificationPreference()" class="btn btn-primary mt-3">Save Preferences</button>
</div>


<script>
document.addEventListener("DOMContentLoaded", async function () {
    await loadNotificationPreference();
    
    // Attach event listener to day range dropdown
    document.getElementById("dayRange").addEventListener("change", toggleCustomDaysVisibility);
    toggleCustomDaysVisibility(); // Set the correct visibility based on the initial state
});

var userIdFromSession = '@userId'; // UserID from the session

async function loadNotificationPreference() {
    console.log("Fetching saved preferences...");

    try {
        const response = await fetch(`/NotificationPreference/get-all?userId=${userIdFromSession}`);

        if (!response.ok) {
            throw new Error("Failed to fetch preferences.");
        }

        const preferences = await response.json();
        console.log("Fetched Preferences:", preferences);

        const userPreference = preferences.find(pref => pref.userID === userIdFromSession);

        // Set toggle switches for methods
        document.getElementById("smsNotification").checked = userPreference.methods.includes("sms");
        document.getElementById("emailNotification").checked = userPreference.methods.includes("email");

        // Set the day range selection
        const dndDaysArray = userPreference.dndDays.split(",");

        if (dndDaysArray.length === 7) {
            document.getElementById("dayRange").value = "daily";
        } else if (dndDaysArray.length === 5) {
            document.getElementById("dayRange").value = "weekdays";
        } else if (dndDaysArray.length === 2 && dndDaysArray.includes("Saturday") && dndDaysArray.includes("Sunday")) {
            document.getElementById("dayRange").value = "weekends";
        } else if (dndDaysArray.includes("none")) {
            document.getElementById("dayRange").value = "none";  // Set to "none" when "none" is in dndDays
        } else {
            document.getElementById("dayRange").value = "custom";
        }
        toggleCustomDaysVisibility(); // Apply visibility rules for custom days

        // Set checkboxes for custom days
        dndDaysArray.forEach(day => {
            const checkbox = document.getElementById(day.toLowerCase());
            if (checkbox) {
                checkbox.checked = true;
            }
        });

        if (userPreference.dndTimeRange === "00:00:00-1.00:00:00") {
            document.getElementById("dndStartTime").value = "";
            document.getElementById("dndEndTime").value = "";
        } else if (userPreference.dndTimeRange && userPreference.dndTimeRange.includes('-')) {
            const [startTime, endTime] = userPreference.dndTimeRange.split('-');
            
            // Ensure the start and end times are valid before setting them
            if (startTime && endTime) {
                document.getElementById("dndStartTime").value = startTime.slice(0, 5);
                document.getElementById("dndEndTime").value = endTime.slice(0, 5);
            }
        } else {
            // If dndTimeRange is invalid (null, empty, or incorrect format), reset time fields
            document.getElementById("dndStartTime").value = "";
            document.getElementById("dndEndTime").value = "";
        }

    } catch (error) {
        console.error("Error loading preferences:", error);
    }
}


async function saveNotificationPreference() {
    console.log('Preference save triggered');

    var userId = '@ViewData["UserID"]';
    console.log("UserID from session: " + userId);

    const selectedMethods = [];
    const selectedDndDays = [];

    const startTime = document.getElementById("dndStartTime").value;
    const endTime = document.getElementById("dndEndTime").value;

    // Collect selected DND days based on the day range selection
    const selectedDayRange = document.getElementById("dayRange").value;

    if (selectedDayRange === "none") {
        selectedDndDays.push("none"); // Send "none" when "None" is selected
    } else if (selectedDayRange === "custom") {
        // Custom day selection
        if (document.getElementById('monday').checked) selectedDndDays.push('Monday');
        if (document.getElementById('tuesday').checked) selectedDndDays.push('Tuesday');
        if (document.getElementById('wednesday').checked) selectedDndDays.push('Wednesday');
        if (document.getElementById('thursday').checked) selectedDndDays.push('Thursday');
        if (document.getElementById('friday').checked) selectedDndDays.push('Friday');
        if (document.getElementById('saturday').checked) selectedDndDays.push('Saturday');
        if (document.getElementById('sunday').checked) selectedDndDays.push('Sunday');
    } else if (selectedDayRange === "weekdays") {
        selectedDndDays.push("Monday", "Tuesday", "Wednesday", "Thursday", "Friday");
    } else if (selectedDayRange === "weekends") {
        selectedDndDays.push("Saturday", "Sunday");
    } else if (selectedDayRange === "daily") {
        selectedDndDays.push("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday");
    }

    const dndDaysString = selectedDndDays.join(',');

    // Collect selected notification methods
    if (document.getElementById('smsNotification').checked) selectedMethods.push('sms');
    if (document.getElementById('emailNotification').checked) selectedMethods.push('email');

    const methodsString = selectedMethods.join(',');

    // Use null for dndTimeRange if either start or end time is empty
    const dndTimeRange = (startTime && endTime) ? `${startTime}-${endTime}` : null;

    try {
        const preferenceData = {
            methods: methodsString,
            dndDays: dndDaysString,
            dndTimeRange: dndTimeRange
        };

        console.log('Data being sent to API:', preferenceData);

        const response = await fetch('/NotificationPreference/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(preferenceData)
        });

        const result = await response.json();

        if (response.ok) {
            alert('Preference saved successfully!');
            await loadNotificationPreference();
        } else {
            alert('Error: ' + result.message);
        }
    } catch (error) {
        alert('Failed to save preference: ' + error.message);
    }
}


function toggleCustomDaysVisibility() {
    const dayRange = document.getElementById("dayRange").value;
    const customDays = document.getElementById("customDays");
    const startTimeInput = document.getElementById("dndStartTime");
    const endTimeInput = document.getElementById("dndEndTime");

    // Show or hide the custom days section based on the selection
    customDays.classList.toggle("d-none", dayRange !== "custom");

    // Disable the time range inputs if "None" is selected
    if (dayRange === "none") {
        startTimeInput.disabled = true;
        endTimeInput.disabled = true;

        // Clear the time fields when "None" is selected
        startTimeInput.value = "";
        endTimeInput.value = "";
    } else {
        startTimeInput.disabled = false;
        endTimeInput.disabled = false;
    }

    // Clear custom days checkboxes if "None" is selected
    if (dayRange === "none") {
        // Clear the day checkboxes when "None" is selected
        const checkboxes = document.querySelectorAll('#customDays input[type="checkbox"]');
        checkboxes.forEach(checkbox => checkbox.checked = false);
    }
}


</script>
